
   Notepad.

Content Management System

Entities:

    Account
        Represents, describes and identifies site's User.

    Page
        Page must have at least one object attached to it (the 'main' object)
        Page defines what template is used to show it.
        Pages form a tree-like structure.

    Object
        Can be attached to Pages.
        Objects can have references between them. They will block deletion of an object, that is referred by others.
        For example:
            CMS::Proxy will refer to CMS::Entry, that it is pointing to.
            Shop::Product will refer to Shop::Category, in which it was put into.
        Objects can define (can be built-in or configurable), what other objects can become their children,
        and what Objects can be their parents (where they can be put).

    Object Specs
        Provide most basic description of objects.

    Asset
        Can be attached to: Site, Page, Object or Comment.
        Can refer to the entity as a whole, or just to one of it's fields.
        Many assets can be attached to entity, but only one asset can be attached to one entity/field combination.

    Comment
        Can be attached to: Page, Object, Asset or Comment.

    Tag
        Can be attached to: Page, Object, Comment or Asset.

Requirements/limitations:

 o Single entity can be attached only to one other entity.



Request "flow" diagram:

 Request starts
       |
       |---> Request handler (object) SLight::Core::Request
       |         |
       |         |----> Session manager
       |         |            |
       |         |   Restore/create session
       |         |            |
       |         |<-----------'
       |         |  
       |         |------> Path Handler SLight::PathHandler::**
       |         |            |
       |         |        Parse Path:
       |         |        - path hander
       |         |        - path
       |         |        - language
       |         |        - protocol
       |         |        - ...
       |         |            |
       |         |   Identify target object(s)
       |         |            |
       |         |<-----------'
       |         |
       |         |---> Protocol handler (object) SLight::ProtocolHandler::**
       |         |            |
       |         |  Select output handler
       |         |            |
       |         | Run action on main object
       |         |            |
       |         |    Queue main content
       |         |            |
       |         |            |---------------.
       |         |            |               |
       |         |            |    Run action on aux objects
       |         |            |     (optionally, if needed)
       |         |            |               |
       |         |            |    Queue aux content
       |         |            |               |
       |         |            |<--------------'
       |         |            |
       |         |            |---> Output handler (module)
       |         |            |            |
       |         |            |    Define needed add-ons
       |         |            |            |
       |         |            |            |---> Add-on handler
       |         |            |            |            |
       |         |            |            |       Run add-ons
       |         |            |            |            |
       |         |            |            |<-----------'
       |         |            |            |
       |         |            |     Queue add-on data
       |         |            |            |
       |         |            |<-----------'
       |         |            |
       |         | Serialize queued data
       |         |            |
       |         |<-----------'
       |         |
       |         |----> Session manager
       |         |            |
       |         |       Store session
       |         |            |
       |         |<-----------'
       |         |
       |<--------'
       |
       v
  Request ends

Content creation:

    Data structures
          ||
 (Data structure object)
          \/
      Data items
          ||
    (Output handler)
          \/
   Serialized content

Data tokens:

    String
        # Single line of text
        # Note, that text string IS a valid 'String' token.

    Text
        # Multi-line text block

    Image
        # Reference to an image

    Link
        # Reference to other page

    Asset
        # Reference to an asset, embedded into the page (usually using icon, thumbnail or some "player")

    Embed
        # Embedded object (like, for example: YouTube movie)

    Table
        # Contains rows of cells of data
    
    Form
        # Contains rows of Form Elements
        # Form element is one of:
        - class
        - rows
        - href
        - hidden

    Container
        - class
        - label
        - content
        
    StringInput

    PasswordInput

    TextInput

    SelectInput

    RadioList
    
    CheckList



Recommended site directory structure:

SLight
    # Project files.
    # May be shared among sites.

SLight_Site
    # Site files.
    # May be shared among sites.

    html
        # HTML templates

    email
        # Email templates

SLight_Data
    # Site's data.
    # This data applies to single site, thus can not be shared.
    # Contents in this directory must be accessible (read/write) to UI process, for example the CGI process.

    asset
        # Assets handled by the site.

    db
        # Database files (if SQLite DB is used)

    cache
        # General-purpose cache (if file-based Cache is used)

    users
        # User accounts (if disk-based User storage used)

    html_cache
        # Cached pre-processed html templates

    email_cache
        # Cached, pre-processed email templates

    l10n_cache
        # Cached localization data.


Project directory structure:

data
    # Data used by Slight.

doc
    # Overall documentation.
    # Technical documentation (API, etc) is embedded in modules using POD.

lib
    # Perl modules, with built-in documentation.

scripts
    # Executable files, for both command line, CGI/FastCGI.

releng
    # Release-engineering scripts and data.
    # For use by SLight developers, when new version is released.
    # Development-only.

sandbox
    # Staging site, for use in testing and development.
    # Development-only.

t
    # Automated test scripts.
    # Development-only.

t_data
    # Data used in automated test scripts.
    # Development-only.

t_source
    # Sources, from which test data is (re-)generated.
    # Development-only.


Perl directory structure:
    API - SLight API

    Interface <-- provides an executable, that sets-up environment and runs request handler.
        CGI
        FastCGI
        CommandLine
        Test

    Protocol
        # Governs the actions being run, checks if their output is adequate.
        # Defines which DataStructure it accepts.

        Web
            # Generate full Web pages.
            # Extension: 'web'

        AJAX
            # Generate page parts and data for Web page use.
            # Extension: 'ajax'

        RSS
            # Return news feeds, that can be aggregated.
            # Extension: 'rss'

    Output
        # Serialize Data into strings.

        HTML
        JSON
        XML

    PathHandler
        Page
            # Default Path handler
            # Looks up into Page storage to find which Objects/Actions should be invoked.

        CMS_Spec
            # Handling of User defined CMS Entry specs


        MyData
            # Handling of User's own data

        Account
            # Handling of user data, by others

        Group
            # Handling of group data, by others


        Authentication
            # Implements support for login/logout/register/password

        Asset
            # Asset management:
            #   - serving assets

        Test
            # Aids testing

        Devel
            # Development aids (in separate package?)

    PathHandlerBase
        # Base code used by PathHandler objects.

    DataStructure
        Token
            # single data token

        Table
            # Tokens organized into rows and columns
            # Replaces:
            #   CoMe::Response::GenericTable
            #   CoMe::Response::GenericProperties

        List
            # General purpose list
            # Replaces:
            #   CoMe::Response::GenericGrid
            
            RSS
                # Data feed for RSS

        Form
            # Replaces:
            #   CoMe::Response::GenericForm
            #   CoMe::Response::DiffForm

        Dialog
            # General purpose, generic dialog box, with text and buttons
            
            Notification
                # Dialog box with text and OK button
                # Replaces:
                #   CoMe::Response::GenericMessage

            YesNo
                # Dialog box with text, and set of buttons: 'Yes' and 'No'
                # Replaces:
                #   CoMe::Response::YesNo

    Handler - modules, that handle objects
    HandlerBase - 'base' modules, used by Handlers

    DataType <-- serialize/deserialize data items.
    Validator
        # Check data for errors
        # Ported from CoMe as-is

    Addon
        # They replace corresponding CoMe plug-ins

        Core::PathBar
        Core::MainMenu
        Core::SubMenu
        Core::Pager
        Core::Toolbox
        Core::SysInfo

    AddonBase

    Metadata <-- each package has to install it's metadata module here
        Core
        CMS
        Forum
        Poll
        Shop
        BugTrack

In separate packages: (?)
    Devel - development tools

Handler objects (Object::Aspect::Action + steps)


Core::Asset::Show
    view

    # replaces:
    Content/Handler/Content/Attachment.pm

Core::Asset::List
    view

Core::Search::Search
    view
    advanced
    query

    # replaces:
    Search/Handler/Search/Overview.pm
    Search/Handler/Search/Advanced.pm



Core::Authentication::Login

    # replaces:
    User/Handler/User/Login.pm

Core::Authentication::Logout

    # replaces:
    User/Handler/User/Logout.pm

Core::Authentication::Password
    view
    request
    verify
    change

    # replaces:
    User/Handler/User/Preset.pm

Core::Authentication::Register
    view
    register
    verify

    # replaces:
    User/Handler/User/Register.pm
    User/Handler/User/Everify.pm

# Empty page

Core::Empty::Add
    view
    preview
    save

Core::Empty::Edit
    view
    preview
    save

Core::Empty::Move
    view
    move

Core::Empty::Delete
    view
    delete


MyAccount::MyData::Overview
    view

MyAccount::MyData::Edit
    view
    save

MyAccount::Password::Change
    view
    save

MyAccount::Avatar::Change
    view
    upload

MyAccount::Avatar::Delete
    view
    delete

MyAccount::Avatar::Image
    view


Account::List::Overview
    view

    # replaces:
    User/Handler/Users/Overview.pm
    User/Handler/Users/Queued.pm

Account::Account::Delete
    view
    delete

    # replaces:
    User/Handler/User/Delete.pm

Account::User::Overview
    view

    # replaces:
    User/Handler/User/Overview.pm

Account::User::New
    view
    save

    # replaces:
    User/Handler/User/New.pm

Account::User::Edit
    view
    save

    # replaces:
    User/Handler/User/Edit.pm

Account::User::Permissions
    view
    grant
    revoke

    # replaces:
    User/Handler/User/Permissions.pm
    User/Handler/User/Revoke.pm

Account::Password::Change
    view
    save

    # replaces:
    User/Handler/User/Passwd.pm

Account::Avatar::Change
    view
    upload

    # replaces:
    User/Handler/User/Avatar.pm

Account::Avatar::Delete
    view
    delete
    
    # replaces:
    User/Handler/User/Avatardelete.pm

Account::Avatar::Image
    view
    
    # replaces:
    User/Handler/User/Avatarimage.pm


Group::List::Overview
    view

    # replaces:
    User/Handler/Group/Overview.pm

Group::Group::New
    view
    add

    # replaces:
    User/Handler/Group/New.pm

Group::Group::Edit
    view
    save

    # replaces:
    User/Handler/Group/Edit.pm
    User/Handler/Group/Disable.pm
    User/Handler/Group/Enable.pm

Group::Group::Delete
    view
    delete

    # replaces:
    User/Handler/Group/Delete.pm

Group::Group::Permissions
    view
    grant
    revoke

    # replaces:
    User/Handler/Group/Permissions.pm

Group::Users::List
    view

    # replaces:
    User/Handler/Group/Users.pm

Group::Users::Add
    view
    add

    # replaces:
    User/Handler/Group/Uadd.pm

Group::Users::Remove
    view
    remove

    # replaces:
    User/Handler/Group/Uremove.pm



CMS::Spec::List
    view

    # replaces:
    Content/Handler/Type/Overview.pm

CMS::Spec::New
    view
    add

    # replaces:
    Content/Handler/Type/New.pm

CMS::Spec::Edit
    view
    save

    # replaces:
    Content/Handler/Type/Edit.pm

CMS::Spec::Delete
    view
    delete

    # replaces:
    Content/Handler/Type/Delete.pm

CMS::SpecField::List
    view

CMS::SpecField::Add
    view
    save

CMS::SpecField::Edit
    view
    save
    move_down
    move_up

    # replaces: 
    Content/Handler/Type/Mdown.pm
    Content/Handler/Type/Mup.pm

CMS::SpecField::Delete
    view
    delete



CMS::Entry::Add
    view
    preview
    save

    # replaces:
    Content/Handler/Content/New.pm

CMS::Entry::Append
    view
    preview
    save

    # replaces:
    Content/Handler/Content/New.pm

CMS::Entry::Edit
    view
    preview
    save

    # replaces:
    Content/Handler/Content/Edit.pm
    Content/Handler/Content/Disable.pm
    Content/Handler/Content/Enable.pm

CMS::Entry::Asset
    # Attach asset to the page

    # replaces:
    Content/Handler/Content/Attach.pm

CMS::Entry::Comment
    view
    preview
    save

    # replaces:
    Content/Handler/Content/Comment.pm

CMS::Entry::Comment
    view
    delete

    # replaces:
    Content/Handler/Content/Delete.pm

# Deleted

    # replaces:
    Content/Handler/Content/Details.pm

CMS::Entry::View
    view

    # replaces:
    Content/Handler/Content/Overview.pm

CMS::Entry::Translate
    view

    # replaces:
    Content/Handler/Content/Translate.pm


Test::Test::Test
    view

    # replaces:
    Test/Handler/Test/Overview.pm


# Deleted

    User/Handler/User/Details.pm

# Deleted

    User/Handler/User/Disable.pm

# Deleted

    User/Handler/User/Enable.pm

# Deleted

    User/Handler/Users/Details.pm



Forum::Root::New

    # replaces:
    Forum/Handler/Forum/New.pm

Forum::Root::Edit

    # replaces:
    Forum/Handler/Forum/Edit.pm

Forum::Root::Delete

    # replaces:
    Forum/Handler/Forum/Delete.pm

# Deleted

    Forum/Handler/Forum/Overview.pm


Forum::Category::Delete

    # replaces:
    Forum/Handler/Category/Delete.pm

Forum::Category::New

    # replaces:
    Forum/Handler/Category/New.pm

Forum::Category::Edit

    # replaces:
    Forum/Handler/Category/Edit.pm

Forum::Category::Threads

    # replaces:
    Forum/Handler/Category/Overview.pm


Forum::Reply::New

    # replaces:
    Forum/Handler/Reply/New.pm

Forum::Reply::Quote

    # replaces:
    Forum/Handler/Reply/Quote.pm

Forum::Replay::Edit

    # replaces:
    Forum/Handler/Reply/Edit.pm

Forum::Reply::Delete

    # replaces:
    Forum/Handler/Reply/Delete.pm


Forum::Thread::New

    # replaces:
    Forum/Handler/Thread/New.pm

Forum::Thread::Edit

    # replaces:
    Forum/Handler/Thread/Edit.pm

Forum::Thread::Overview
    view

    # replaces:
    Forum/Handler/Thread/Overview.pm

Forum::Thread::Delete
    view
    save

    # replaces:
    Forum/Handler/Thread/Delete.pm




----------------------------------------------------------------------------------------------------------------------------------------------------------------
    CMS objects handling.
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Use cases:

    1) Add very first (root) page
        At "/", if there are no pages, SLight will display SLight::Handler::CMS::Welcome
        If User does not want/need any page, He has to ass an 'Empty'

    2) Adding sub-page

    3) Appending stuff to a page

    4) Displaying stuff from a page

    5) Editing page

    6) Editing stuff from a page

    7) Deleting stuff from a page

    8) Deleting page

Bla bla bla...

    - Use 'Add content'

    - Page opens to SLight::Handler::Core::Empty::Add::handle_view

    - Page shows:
        SLight::Handler::Core::Empty               - Add as new page - Append to this page
        SLight::Handler::CMS::Entry    /   Foo bar - Add as new page - Append to this page
        SLight::Handler::Forum::Root               - Add as new page
            |                                 |
            |                                 '---( this is the 'caption', if the object has versions )
            |
            '---( this will be translated some time soon )

    - Browser is redirected to chosen handler's 'New' action.
      This action should be based on SLight::HandlerBase::Page::New.

    - Metadata, about which Handler objects can be used on Pages (at all) + filter by that.

    - Metadata, about what objects can be under and above given object + filter by that.

    - New action defines the resulting object, which is then attached to a page (created, if needed).

    - Stuff that can not be displayed as Page will not appear in 'MainMenu' nor 'SubMenu'.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
    Path descriptions...
----------------------------------------------------------------------------------------------------------------------------------------------------------------

  (Site)
    +- Foo
    |   +- F1
    |   '- F5
    |
    +- Bar
    |   '- BarBar
    |       '- TripleBar
    |
    '- Baz
        +- Bazaz
        +- Bazum
        '- Bazer

    Foo

    Foo / F1

    Foo / F2

    Bar

    Bar / BarBar

    Bar / BarBar / TripleBar


Authorization (Permissions)

    For the User to have access to an object, the following must be met:
    1) There is an entry for this user_type in System_Access
        - 'System' is checked (always)
        - 'Guest' is checked (if the User is NOT authenticated)
        - 'Authenticated' is checked (if the User IS authenticated)
    2) There is an entry for this user_id in User_Access
    
    To be able to use a functionality, policy 'GRANTED' must be found.
    If, at any level, a policy of 'DENIED' is found, access is denied,
    and no additional lookup is done (search is aborted).

RPC data format

    Request:

        <SLight>
            <request>
                <version>1.0</version>
            </request>
            <auth>
                <user>...</user>
                <pass>...</pass>
            </auth>
            <items>
            </items>
        </SLight>

    Response:

        <SLight>
            <response>
                <version>1.0</version>
                <status>OK</status>
            </response>
            <items>
                <Content>
                    <id>123</id>
                    <foo>Yes</foo>
                    <bar>No</bar>
                    <data>
                        <field id=1>
                            <sex>Yes, often</sex>
                        </field>
                    </data>
                </Content>
            </items>
        </SLight>


New Content Data structure.

 Page Entity Data   Content Spec <----- Content Spec Field
   | ($language)       |                   |
   V                   V                   V
  Page Entity <--- Content Entity <--- Content Entity Field <--($language)-- Content Entity Data
                       ^
                       |
                    Email entity

 API::Page        <-- manage content structure
 API::Content     <-- manage content items
 API::ContentSpec <-- manage content's specs
 API::ContentData <-- manage content's data

 API::ContentModel <-- One (high-level) API to rule them all ;)





    SLight v0.0.4 to v0.0.5 migration.

Change block naming:
    Run:
        %s/plugin/addon/
    in each HTML template.

    Upgrade database to new schema:
    Run:
        $ sqlite3 SLight_data/db/slight.sqlite

    Then in monitor run:
        ALTER TABLE Page_Entity ADD COLUMN `menu_order` INTEGER NOT NULL DEFAULT 0;
        ALTER TABLE Page_Entity ADD COLUMN `languages` VARCHAR(94) NOT NULL DEFAULT '';

        CREATE TABLE Page_Entity_Data (
            `id` INTEGER PRIMARY KEY,
            `Page_Entity_id` INTEGER NOT NULL,
            `language` CHAR(5) NOT NULL,
            `title` VARCHAR(256) NOT NULL,
            `menu`  VARCHAR(128),
            `breadcrumb` VARCHAR(128),
            FOREIGN KEY (`Page_Entity_id`) REFERENCES Page_Entity (`id`) ON DELETE CASCADE
        );
        CREATE UNIQUE INDEX Page_Entity_Language ON Page_Entity_Data (Page_Entity_id, language);

        ALTER TABLE Content_Entity_Data ADD COLUMN `summary` TEXT NOT NULL DEFAULT '';
        ALTER TABLE Content_Entity_Data ADD COLUMM `sort_index_aid` INTEGER NOT NULL DEFAULT 0;

    Note: change '1' to proper ID from the Email table!

        UPDATE Content_Entity SET Email_id = 1 WHERE Email_id IS NULL;

        BEGIN TRANSACTION;
        ALTER TABLE Content_Entity_Data RENAME TO tmp_Content_Entity_Data;
        CREATE TABLE Content_Entity_Data (
            `id` INTEGER PRIMARY KEY,
            `Content_Entity_id` INTEGER NOT NULL,
            `Content_Spec_Field_id` INTEGER NOT NULL,
                -- this is the primary index column from Content_Spec_Field.
            `language` CHAR(5) NOT NULL,
                -- 2 (pl) or 5 (pl_pl) character language code, if the field is translatable.
                -- * if the field is not translatable.
            `value` TEXT NOT NULL,
            `summary` TEXT NOT NULL DEFAULT '',
            `sort_index_aid` INTEGER NOT NULL DEFAULT 0,
                -- This integer is used to aid quick pre-sorting of data. It should be created
                -- by multiplication of first four characters from `value` column.
            FOREIGN KEY(`Content_Entity_id`) REFERENCES Content_Entity(`id`) ON DELETE CASCADE,
            FOREIGN KEY(`Content_Spec_Field_id`) REFERENCES Content_Spec_Field(`id`) ON DELETE CASCADE
        );
        CREATE UNIQUE INDEX Content_Entity_Data_unique ON Content_Entity_Data (Content_Entity_id, Content_Spec_Field_id, language);
        CREATE        INDEX Content_Entity_Data_fetch  ON Content_Entity_Data (Content_Entity_id, language);
        INSERT INTO Content_Entity_Data (Content_Entity_id, Content_Spec_Field_id, language, value) SELECT Content_Entity_id, Content_Spec_Field_id, language, value FROM tmp_Content_Entity_Data;
        DROP TABLE tmp_Content_Entity_Data;
        COMMIT;

        ALTER TABLE Content_Spec_Field ADD COLUMN `field_index` SMALLINT DEFAULT 0;
        ALTER TABLE Content_Spec_Field ADD COLUMN `default_value` VARCHAR(255) DEFAULT '';

        BEGIN TRANSACTION;
        ALTER TABLE Content_Spec_Field RENAME TO tmp_Content_Spec_Field;
        CREATE TABLE Content_Spec_Field (
            `id`        INTEGER PRIMARY KEY,
            `Content_Spec_id` INTEGER,
            `class`    VARCHAR(64) NOT NULL,
            `caption`   VARCHAR(128) NOT NULL,
            `field_index` SMALLINT NOT NULL,
            `datatype`  VARCHAR(64)  NOT NULL,
            `default_value` VARCHAR(255) NOT NULL,
            `translate` SMALLINT NOT NULL,
            `display_on_page` SMALLINT NOT NULL DEFAULT 2,
            `display_on_list` SMALLINT NOT NULL DEFAULT 2,
            `display_label` SMALLINT NOT NULL DEFAULT 1,
            `optional` SMALLINT NOT NULL DEFAULT 1,
            `max_length` INTEGER NOT NULL DEFAULT 100,
            FOREIGN KEY(`Content_Spec_id`) REFERENCES Content_Spec(`id`) ON DELETE CASCADE
        );
        INSERT INTO Content_Spec_Field
            (id, Content_Spec_id, class, `caption`, `field_index`, `datatype`, `default_value`, `translate`, `display_on_page`,`display_on_list`, `display_label`, `optional`, `max_length`) 
        SELECT
            id, Content_Spec_id, class, `caption`, `order`,       `datatype`, `default`,       `translate`, `display_on_page`, `display_on_list`, `display_label`, `optional`, `max_length`
        FROM tmp_Content_Spec_Field;
        DROP TABLE tmp_Content_Spec_Field;
        COMMIT;



